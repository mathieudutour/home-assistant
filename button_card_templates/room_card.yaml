room_card:
  show_label: true
  tap_action:
    action: nothing
    scroll_to: "[[[ querySelectorAllDeep('button-card #container.no-icon > #name').find(x => x.innerText === variables.title)?.scrollIntoView({ behavior: 'smooth', block: 'start' }) ]]]"
    haptic: "medium"
  double_tap_action:
    action: "more-info"
    haptic: "medium"
  custom_fields:
    light:
      card:
        type: "custom:button-card"
        entity: "[[[ return 'light.' + variables.entity ]]]"
        show_name: false
        show_label: false
        state:
          - value: "on"
            icon: "mdi:lightbulb"
          - value: "off"
            icon: "mdi:lightbulb-off"
          - value: "unavailable"
            icon: "mdi:lightbulb-question"
            styles:
              icon:
                - color: "var(--contrast6)"
          - value: "unknown"
            icon: "mdi:lightbulb-question"
            styles:
              icon:
                - color: "var(--contrast6)"
        styles:
          icon:
            - width: "24px"
            - height: "24px"
    cover:
      card:
        type: "custom:button-card"
        entity: "[[[ return 'cover.' + variables.entity ]]]"
        show_name: false
        show_label: false
        state:
          - value: "open"
            icon: "mdi:window-shutter-open"
          - value: "opening"
            icon: "mdi:window-shutter-open"
          - value: "closing"
            icon: "mdi:window-shutter-open"
          - value: "closed"
            icon: "mdi:window-shutter"
          - value: "unavailable"
            icon: undefined
          - value: "unknown"
            icon: undefined
        styles:
          icon:
            - width: "24px"
            - height: "24px"
  styles:
    grid:
      - grid-template-areas: "'i i light' 'n n n' 'l l cover'"
      - grid-template-columns: "1fr 1fr 1fr"
      - grid-template-rows: "min-content"
    card:
      - background: "var(--contrast2)"
      - padding: "16px"
      - "--mdc-ripple-press-opacity": 0
      - height: "100px"
    img_cell:
      - justify-self: "start"
      - width: "24px"
    icon:
      - width: "24px"
      - height: "24px"
      - color: "var(--contrast8)"
    label:
      - justify-self: "start"
      - align-self: "start"
      - font-size: "12px"
      - filter: "opacity(40%)"
      - margin: "4px 0 3px 0"
      - max-width: "100%"
      - color: "var(--contrast8)"
    name:
      - justify-self: "start"
      - font-size: "14px"
      - margin: "4px 0 12px 0"
      - color: "var(--contrast8)"
  state:
    - operator: template
      value: >
        [[[ return states['light.' + variables.entity].state === 'on' && (states['cover.' + variables.entity].state === 'opening' || states['cover.' + variables.entity].state === 'open' || states['cover.' + variables.entity].state === 'closing') ]]]
      styles:
        card:
          - background: "var(--green)"
        icon:
          - color: "var(--black)"
        label:
          - color: "var(--black)"
        name:
          - color: "var(--black)"
    - operator: template
      value: >
        [[[ return states['light.' + variables.entity].state === 'off' && (states['cover.' + variables.entity].state === 'opening' || states['cover.' + variables.entity].state === 'open' || states['cover.' + variables.entity].state === 'closing') ]]]
      styles:
        card:
          - background: "var(--blue)"
        icon:
          - color: "var(--black)"
        label:
          - color: "var(--black)"
        name:
          - color: "var(--black)"
    - operator: template
      value: >
        [[[ return states['light.' + variables.entity].state === 'on' && !(states['cover.' + variables.entity].state === 'opening' || states['cover.' + variables.entity].state === 'open' || states['cover.' + variables.entity].state === 'closing') ]]]
      styles:
        card:
          - background: "var(--yellow)"
        icon:
          - color: "var(--black)"
        label:
          - color: "var(--black)"
        name:
          - color: "var(--black)"
    - operator: template
      value: >
        [[[ return states['light.' + variables.entity].state === 'off' && !(states['cover.' + variables.entity].state === 'opening' || states['cover.' + variables.entity].state === 'open' || states['cover.' + variables.entity].state === 'closing') ]]]
      styles:
        icon:
          - color: "var(--contrast20)"
        label:
          - color: "var(--contrast20)"
        name:
          - color: "var(--contrast20)"
